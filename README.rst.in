=========================================
 ``jeni`` injects annotated dependencies
=========================================

**jeni** lets developers build applications and not e.g. web applications.

Overview
========

1. Configure each dependency in the project (requirements.txt, config, ...).
2. Write code with natural call signatures taking those dependencies as input.
3. Implement a **Provider** for each dependency, register with an **Injector**.

jeni runs on Python 2.7, Python 3.3 through 3.5, and pypy.


Motivation
==========

Write code as its meant to be written, without pegging function call signatures
to some monolithic object that only applies to a specific runtime. This is
about more than just testing. This is about composition.

jeni's design principle is to have all annotated callables usable in a context
that knows nothing about jeni. Any callable is as relevant to a fresh Python
REPL as it is to an injector.


Annotations
===========

Annotations are implemented as decorators for Python2. In Python 3, either
decorators or function annotations can be used for injection.


Core API
========

.. exec:: from jeni import Annotator, annotate
.. eval:: insert_doc(Annotator.__call__, name='annotate')


.. exec:: from jeni import Provider
.. eval:: insert_doc(Provider)


.. exec:: opt = {'ns': 'Provider', 'u': '-'}
.. eval:: insert_args_doc(Provider.get, **opt)


.. eval:: insert_args_doc(Provider.close, **opt)


.. exec:: from jeni import Injector
.. eval:: insert_doc(Injector)


.. exec:: opt = {'ns': 'Injector', 'u': '-'}
.. eval:: insert_args_doc(Injector.__init__, **opt)


.. eval:: insert_args_doc(Injector.sub, **opt)


.. eval:: insert_args_doc(Injector.provider, **opt)


.. eval:: insert_args_doc(Injector.factory, **opt)


.. eval:: insert_args_doc(Injector.value, **opt)


.. eval:: insert_args_doc(Injector.apply, **opt)


.. eval:: insert_args_doc(Injector.partial, **opt)


.. eval:: insert_args_doc(Injector.eager_partial, **opt)


.. eval:: insert_args_doc(Injector.apply_regardless, **opt)


.. eval:: insert_args_doc(Injector.partial_regardless, **opt)


.. eval:: insert_args_doc(Injector.eager_partial_regardless, **opt)


.. eval:: insert_args_doc(Injector.get, **opt)


.. eval:: insert_args_doc(Injector.close, **opt)


.. eval:: insert_args_doc(Injector.enter, **opt)


.. eval:: insert_args_doc(Injector.exit, **opt)


Additional API
==============

.. eval:: insert_doc(Annotator.wraps, name='annotate.wraps')


.. eval:: insert_doc(Annotator.maybe, name='annotate.maybe')


.. eval:: insert_doc(Annotator.partial, name='annotate.partial')


.. eval:: insert_doc(Annotator.eager_partial, name='annotate.eager_partial')


.. exec:: from jeni import InjectorProxy
.. eval:: insert_doc(InjectorProxy)


License
=======

Copyright 2013-2015 Ron DuPlain <ron.duplain@gmail.com> (see AUTHORS file).

Released under the BSD License (see LICENSE file).
